%% --------------------------------------------------
%% DO NOT EDIT THIS FILE
%% It was generated automatically from the following specs
%% ./mustache-spec/specs/inverted.json
%% Fetched from this repository
%% https://github.com/mustache/spec
%%
%% date: 2022-10-20 19:49:18
%% @version v0.0.0
%% @reference Eptwalabha, https://github.com/Eptwalabha.
%%
%% @doc Inverted Section tags and End Section tags are used in combination to
%% wrap a
%% section of the template.
%%
%% These tags' content MUST be a non-whitespace character sequence NOT
%% containing the current closing delimiter; each Inverted Section tag MUST be
%% followed by an End Section tag with the same content within the same
%% section.
%%
%% This tag's content names the data to replaceÂ the tag. Name resolution is as
%% follows:
%% 1) Split the name on periods; the first part is the name to resolve, any
%% remaining parts should be retained.
%% 2) Walk the context stack from top to bottom, finding the first context
%% that is a) a hash containing the name as a key OR b) an object responding
%% to a method with the given name.
%% 3) If the context is a hash, the data is the value associated with the
%% name.
%% 4) If the context is an object and the method with the given name has an
%% arity of 1, the method SHOULD be called with a String containing the
%% unprocessed contents of the sections; the data is the value returned.
%% 5) Otherwise, the data is the value returned by calling the method with
%% the given name.
%% 6) If any name parts were retained in step 1, each should be resolved
%% against a context stack containing only the result from the former
%% resolution. If any part fails resolution, the result should be considered
%% falsey, and should interpolate as the empty string.
%% If the data is not of a list type, it is coerced into a list as follows: if
%% the data is truthy (e.g. `!!data == true`), use a single-element list
%% containing the data, otherwise use an empty list.
%%
%% This section MUST NOT be rendered unless the data list is empty.
%%
%% Inverted Section and End Section tags SHOULD be treated as standalone when
%% appropriate.
%%
%% @end

-module(inverted_test).

-include_lib("eunit/include/eunit.hrl").

-define(TO_LIST(Something), unicode:characters_to_list(Something)).

%% @doc Falsey sections should have their contents rendered.
falsey_test() ->
    Template = <<"\"{{^boolean}}This should be rendered.{{/boolean}}\"">>,
    Data = #{boolean => false},
    Expected = <<"\"This should be rendered.\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Truthy sections should have their contents omitted.
truthy_test() ->
    Template = <<"\"{{^boolean}}This should not be rendered.{{/boolean}}\"">>,
    Data = #{boolean => true},
    Expected = <<"\"\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Null is falsey.
null_is_falsey_test() ->
    Template = <<"\"{{^null}}This should be rendered.{{/null}}\"">>,
    Data = #{null => null},
    Expected = <<"\"This should be rendered.\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Objects and hashes should behave like truthy values.
context_test() ->
    Template = <<"\"{{^context}}Hi {{name}}.{{/context}}\"">>,
    Data = #{context => #{name => <<"Joe">>}},
    Expected = <<"\"\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Lists should behave like truthy values.
list_test() ->
    Template = <<"\"{{^list}}{{n}}{{/list}}\"">>,
    Data = #{list => [#{n => 1},#{n => 2},#{n => 3}]},
    Expected = <<"\"\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Empty lists should behave like falsey values.
empty_list_test() ->
    Template = <<"\"{{^list}}Yay lists!{{/list}}\"">>,
    Data = #{list => []},
    Expected = <<"\"Yay lists!\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Multiple inverted sections per template should be permitted.
doubled_test() ->
    Template = <<"{{^bool}}\n* first\n{{/bool}}\n* {{two}}\n{{^bool}}\n* third\n{{/bool}}\n">>,
    Data = #{bool => false,two => <<"second">>},
    Expected = <<"* first\n* second\n* third\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Nested falsey sections should have their contents rendered.
nested_falsey_test() ->
    Template = <<"| A {{^bool}}B {{^bool}}C{{/bool}} D{{/bool}} E |">>,
    Data = #{bool => false},
    Expected = <<"| A B C D E |">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Nested truthy sections should be omitted.
nested_truthy_test() ->
    Template = <<"| A {{^bool}}B {{^bool}}C{{/bool}} D{{/bool}} E |">>,
    Data = #{bool => true},
    Expected = <<"| A  E |">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Failed context lookups should be considered falsey.
context_misses_test() ->
    Template = <<"[{{^missing}}Cannot find key 'missing'!{{/missing}}]">>,
    Data = #{},
    Expected = <<"[Cannot find key 'missing'!]">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Dotted names should be valid for Inverted Section tags.
dotted_names_truthy_test() ->
    Template = <<"\"{{^a.b.c}}Not Here{{/a.b.c}}\" == \"\"">>,
    Data = #{a => #{b => #{c => true}}},
    Expected = <<"\"\" == \"\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Dotted names should be valid for Inverted Section tags.
dotted_names_falsey_test() ->
    Template = <<"\"{{^a.b.c}}Not Here{{/a.b.c}}\" == \"Not Here\"">>,
    Data = #{a => #{b => #{c => false}}},
    Expected = <<"\"Not Here\" == \"Not Here\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Dotted names that cannot be resolved should be considered falsey.
dotted_names_broken_chains_test() ->
    Template = <<"\"{{^a.b.c}}Not Here{{/a.b.c}}\" == \"Not Here\"">>,
    Data = #{a => #{}},
    Expected = <<"\"Not Here\" == \"Not Here\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Inverted sections should not alter surrounding whitespace.
surrounding_whitespace_test() ->
    Template = <<" | {{^boolean}}\t|\t{{/boolean}} | \n">>,
    Data = #{boolean => false},
    Expected = <<" | \t|\t | \n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Inverted should not alter internal whitespace.
internal_whitespace_test() ->
    Template = <<" | {{^boolean}} {{! Important Whitespace }}\n {{/boolean}} | \n">>,
    Data = #{boolean => false},
    Expected = <<" |  \n  | \n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Single-line sections should not alter surrounding whitespace.
indented_inline_sections_test() ->
    Template = <<" {{^boolean}}NO{{/boolean}}\n {{^boolean}}WAY{{/boolean}}\n">>,
    Data = #{boolean => false},
    Expected = <<" NO\n WAY\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Standalone lines should be removed from the template.
standalone_lines_test() ->
    Template = <<"| This Is\n{{^boolean}}\n|\n{{/boolean}}\n| A Line\n">>,
    Data = #{boolean => false},
    Expected = <<"| This Is\n|\n| A Line\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Standalone indented lines should be removed from the template.
standalone_indented_lines_test() ->
    Template = <<"| This Is\n  {{^boolean}}\n|\n  {{/boolean}}\n| A Line\n">>,
    Data = #{boolean => false},
    Expected = <<"| This Is\n|\n| A Line\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc "\r\n" should be considered a newline for standalone tags.
standalone_line_endings_test() ->
    Template = <<"|\r\n{{^boolean}}\r\n{{/boolean}}\r\n|">>,
    Data = #{boolean => false},
    Expected = <<"|\r\n|">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Standalone tags should not require a newline to precede them.
standalone_without_previous_line_test() ->
    Template = <<"  {{^boolean}}\n^{{/boolean}}\n/">>,
    Data = #{boolean => false},
    Expected = <<"^\n/">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Standalone tags should not require a newline to follow them.
standalone_without_newline_test() ->
    Template = <<"^{{^boolean}}\n/\n  {{/boolean}}">>,
    Data = #{boolean => false},
    Expected = <<"^\n/\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Superfluous in-tag whitespace should be ignored.
padding_test() ->
    Template = <<"|{{^ boolean }}={{/ boolean }}|">>,
    Data = #{boolean => false},
    Expected = <<"|=|">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).
