%% --------------------------------------------------
%% DO NOT EDIT THIS FILE
%% It was generated automatically from the following specs
%% ./mustache-spec/specs/comments.json
%% Fetched from this repository
%% https://github.com/mustache/spec
%%
%% date: 2022-10-20 19:31:19
%% @version v0.0.0
%% @reference Eptwalabha, https://github.com/Eptwalabha.
%%
%% @doc Comment tags represent content that should never appear in the
%% resulting
%% output.
%%
%% The tag's content may contain any substring (including newlines) EXCEPT the
%% closing delimiter.
%%
%% Comment tags SHOULD be treated as standalone when appropriate.
%%
%% @end

-module(comments_test).

-include_lib("eunit/include/eunit.hrl").

-define(TO_LIST(Something), unicode:characters_to_list(Something)).

%% @doc Comment blocks should be removed from the template.
inline_test() ->
    Template = <<"12345{{! Comment Block! }}67890">>,
    Data = #{},
    Expected = <<"1234567890">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Multiline comments should be permitted.
multiline_test() ->
    Template = <<"12345{{!\n  This is a\n  multi-line comment...\n}}67890\n">>,
    Data = #{},
    Expected = <<"1234567890\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc All standalone comment lines should be removed.
standalone_test() ->
    Template = <<"Begin.\n{{! Comment Block! }}\nEnd.\n">>,
    Data = #{},
    Expected = <<"Begin.\nEnd.\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc All standalone comment lines should be removed.
indented_standalone_test() ->
    Template = <<"Begin.\n  {{! Indented Comment Block! }}\nEnd.\n">>,
    Data = #{},
    Expected = <<"Begin.\nEnd.\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc "\r\n" should be considered a newline for standalone tags.
standalone_line_endings_test() ->
    Template = <<"|\r\n{{! Standalone Comment }}\r\n|">>,
    Data = #{},
    Expected = <<"|\r\n|">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Standalone tags should not require a newline to precede them.
standalone_without_previous_line_test() ->
    Template = <<"  {{! I'm Still Standalone }}\n!">>,
    Data = #{},
    Expected = <<"!">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Standalone tags should not require a newline to follow them.
standalone_without_newline_test() ->
    Template = <<"!\n  {{! I'm Still Standalone }}">>,
    Data = #{},
    Expected = <<"!\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc All standalone comment lines should be removed.
multiline_standalone_test() ->
    Template = <<"Begin.\n{{!\nSomething's going on here...\n}}\nEnd.\n">>,
    Data = #{},
    Expected = <<"Begin.\nEnd.\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc All standalone comment lines should be removed.
indented_multiline_standalone_test() ->
    Template = <<"Begin.\n  {{!\n    Something's going on here...\n  }}\nEnd.\n">>,
    Data = #{},
    Expected = <<"Begin.\nEnd.\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Inline comments should not strip whitespace
indented_inline_test() ->
    Template = <<"  12 {{! 34 }}\n">>,
    Data = #{},
    Expected = <<"  12 \n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Comment removal should preserve surrounding whitespace.
surrounding_whitespace_test() ->
    Template = <<"12345 {{! Comment Block! }} 67890">>,
    Data = #{},
    Expected = <<"12345  67890">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Comments must never render, even if variable with same name exists.
variable_name_collision_test() ->
    Template = <<"comments never show: >{{! comment }}<">>,
    Data = #{'! comment' => 1,'! comment ' => 2,'!comment' => 3,comment => 4},
    Expected = <<"comments never show: ><">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).
