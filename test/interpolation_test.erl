%% --------------------------------------------------
%% DO NOT EDIT THIS FILE
%% It was generated automatically from the following specs
%% ./mustache-spec/specs/interpolation.json
%% Fetched from this repository
%% https://github.com/mustache/spec
%%
%% date: 2022-10-20 19:49:18
%% @version v0.0.0
%% @reference Eptwalabha, https://github.com/Eptwalabha.
%%
%% @doc Interpolation tags are used to integrate dynamic content into the
%% template.
%%
%% The tag's content MUST be a non-whitespace character sequence NOT containing
%% the current closing delimiter.
%%
%% This tag's content names the data to replaceÂ the tag. A single period (`.`)
%% indicates that the item currently sitting atop the context stack should be
%% used; otherwise, name resolution is as follows:
%% 1) Split the name on periods; the first part is the name to resolve, any
%% remaining parts should be retained.
%% 2) Walk the context stack from top to bottom, finding the first context
%% that is a) a hash containing the name as a key OR b) an object responding
%% to a method with the given name.
%% 3) If the context is a hash, the data is the value associated with the
%% name.
%% 4) If the context is an object, the data is the value returned by the
%% method with the given name.
%% 5) If any name parts were retained in step 1, each should be resolved
%% against a context stack containing only the result from the former
%% resolution. If any part fails resolution, the result should be considered
%% falsey, and should interpolate as the empty string.
%% Data should be coerced into a string (and escaped, if appropriate) before
%% interpolation.
%%
%% The Interpolation tags MUST NOT be treated as standalone.
%%
%% @end

-module(interpolation_test).

-include_lib("eunit/include/eunit.hrl").

-define(TO_LIST(Something), unicode:characters_to_list(Something)).

%% @doc Mustache-free templates should render as-is.
no_interpolation_test() ->
    Template = <<"Hello from {Mustache}!\n">>,
    Data = #{},
    Expected = <<"Hello from {Mustache}!\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Unadorned tags should interpolate content into the template.
basic_interpolation_test() ->
    Template = <<"Hello, {{subject}}!\n">>,
    Data = #{subject => <<"world">>},
    Expected = <<"Hello, world!\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Basic interpolation should be HTML escaped.
html_escaping_test() ->
    Template = <<"These characters should be HTML escaped: {{forbidden}}\n">>,
    Data = #{forbidden => <<"& \" < >">>},
    Expected = <<"These characters should be HTML escaped: &amp; &quot; &lt; &gt;\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Triple mustaches should interpolate without HTML escaping.
triple_mustache_test() ->
    Template = <<"These characters should not be HTML escaped: {{{forbidden}}}\n">>,
    Data = #{forbidden => <<"& \" < >">>},
    Expected = <<"These characters should not be HTML escaped: & \" < >\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Ampersand should interpolate without HTML escaping.
ampersand_test() ->
    Template = <<"These characters should not be HTML escaped: {{&forbidden}}\n">>,
    Data = #{forbidden => <<"& \" < >">>},
    Expected = <<"These characters should not be HTML escaped: & \" < >\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Integers should interpolate seamlessly.
basic_integer_interpolation_test() ->
    Template = <<"\"{{mph}} miles an hour!\"">>,
    Data = #{mph => 85},
    Expected = <<"\"85 miles an hour!\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Integers should interpolate seamlessly.
triple_mustache_integer_interpolation_test() ->
    Template = <<"\"{{{mph}}} miles an hour!\"">>,
    Data = #{mph => 85},
    Expected = <<"\"85 miles an hour!\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Integers should interpolate seamlessly.
ampersand_integer_interpolation_test() ->
    Template = <<"\"{{&mph}} miles an hour!\"">>,
    Data = #{mph => 85},
    Expected = <<"\"85 miles an hour!\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Decimals should interpolate seamlessly with proper significance.
basic_decimal_interpolation_test() ->
    Template = <<"\"{{power}} jiggawatts!\"">>,
    Data = #{power => 1.21},
    Expected = <<"\"1.21 jiggawatts!\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Decimals should interpolate seamlessly with proper significance.
triple_mustache_decimal_interpolation_test() ->
    Template = <<"\"{{{power}}} jiggawatts!\"">>,
    Data = #{power => 1.21},
    Expected = <<"\"1.21 jiggawatts!\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Decimals should interpolate seamlessly with proper significance.
ampersand_decimal_interpolation_test() ->
    Template = <<"\"{{&power}} jiggawatts!\"">>,
    Data = #{power => 1.21},
    Expected = <<"\"1.21 jiggawatts!\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Nulls should interpolate as the empty string.
basic_null_interpolation_test() ->
    Template = <<"I ({{cannot}}) be seen!">>,
    Data = #{cannot => null},
    Expected = <<"I () be seen!">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Nulls should interpolate as the empty string.
triple_mustache_null_interpolation_test() ->
    Template = <<"I ({{{cannot}}}) be seen!">>,
    Data = #{cannot => null},
    Expected = <<"I () be seen!">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Nulls should interpolate as the empty string.
ampersand_null_interpolation_test() ->
    Template = <<"I ({{&cannot}}) be seen!">>,
    Data = #{cannot => null},
    Expected = <<"I () be seen!">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Failed context lookups should default to empty strings.
basic_context_miss_interpolation_test() ->
    Template = <<"I ({{cannot}}) be seen!">>,
    Data = #{},
    Expected = <<"I () be seen!">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Failed context lookups should default to empty strings.
triple_mustache_context_miss_interpolation_test() ->
    Template = <<"I ({{{cannot}}}) be seen!">>,
    Data = #{},
    Expected = <<"I () be seen!">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Failed context lookups should default to empty strings.
ampersand_context_miss_interpolation_test() ->
    Template = <<"I ({{&cannot}}) be seen!">>,
    Data = #{},
    Expected = <<"I () be seen!">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Dotted names should be considered a form of shorthand for sections.
dotted_names_basic_interpolation_test() ->
    Template = <<"\"{{person.name}}\" == \"{{#person}}{{name}}{{/person}}\"">>,
    Data = #{person => #{name => <<"Joe">>}},
    Expected = <<"\"Joe\" == \"Joe\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Dotted names should be considered a form of shorthand for sections.
dotted_names_triple_mustache_interpolation_test() ->
    Template = <<"\"{{{person.name}}}\" == \"{{#person}}{{{name}}}{{/person}}\"">>,
    Data = #{person => #{name => <<"Joe">>}},
    Expected = <<"\"Joe\" == \"Joe\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Dotted names should be considered a form of shorthand for sections.
dotted_names_ampersand_interpolation_test() ->
    Template = <<"\"{{&person.name}}\" == \"{{#person}}{{&name}}{{/person}}\"">>,
    Data = #{person => #{name => <<"Joe">>}},
    Expected = <<"\"Joe\" == \"Joe\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Dotted names should be functional to any level of nesting.
dotted_names_arbitrary_depth_test() ->
    Template = <<"\"{{a.b.c.d.e.name}}\" == \"Phil\"">>,
    Data = #{a => #{b => #{c => #{d => #{e => #{name => <<"Phil">>}}}}}},
    Expected = <<"\"Phil\" == \"Phil\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Any falsey value prior to the last part of the name should yield ''.
dotted_names_broken_chains_test() ->
    Template = <<"\"{{a.b.c}}\" == \"\"">>,
    Data = #{a => #{}},
    Expected = <<"\"\" == \"\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Each part of a dotted name should resolve only against its parent.
dotted_names_broken_chain_resolution_test() ->
    Template = <<"\"{{a.b.c.name}}\" == \"\"">>,
    Data = #{a => #{b => #{}},c => #{name => <<"Jim">>}},
    Expected = <<"\"\" == \"\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc The first part of a dotted name should resolve as any other name.
dotted_names_initial_resolution_test() ->
    Template = <<"\"{{#a}}{{b.c.d.e.name}}{{/a}}\" == \"Phil\"">>,
    Data = #{a => #{b => #{c => #{d => #{e => #{name => <<"Phil">>}}}}},
             b => #{c => #{d => #{e => #{name => <<"Wrong">>}}}}},
    Expected = <<"\"Phil\" == \"Phil\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Dotted names should be resolved against former resolutions.
dotted_names_context_precedence_test() ->
    Template = <<"{{#a}}{{b.c}}{{/a}}">>,
    Data = #{a => #{b => #{}},b => #{c => <<"ERROR">>}},
    Expected = <<>>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Unadorned tags should interpolate content into the template.
implicit_iterators_basic_interpolation_test() ->
    Template = <<"Hello, {{.}}!\n">>,
    Data = <<"world">>,
    Expected = <<"Hello, world!\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Basic interpolation should be HTML escaped.
implicit_iterators_html_escaping_test() ->
    Template = <<"These characters should be HTML escaped: {{.}}\n">>,
    Data = <<"& \" < >">>,
    Expected = <<"These characters should be HTML escaped: &amp; &quot; &lt; &gt;\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Triple mustaches should interpolate without HTML escaping.
implicit_iterators_triple_mustache_test() ->
    Template = <<"These characters should not be HTML escaped: {{{.}}}\n">>,
    Data = <<"& \" < >">>,
    Expected = <<"These characters should not be HTML escaped: & \" < >\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Ampersand should interpolate without HTML escaping.
implicit_iterators_ampersand_test() ->
    Template = <<"These characters should not be HTML escaped: {{&.}}\n">>,
    Data = <<"& \" < >">>,
    Expected = <<"These characters should not be HTML escaped: & \" < >\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Integers should interpolate seamlessly.
implicit_iterators_basic_integer_interpolation_test() ->
    Template = <<"\"{{.}} miles an hour!\"">>,
    Data = 85,
    Expected = <<"\"85 miles an hour!\"">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Interpolation should not alter surrounding whitespace.
interpolation_surrounding_whitespace_test() ->
    Template = <<"| {{string}} |">>,
    Data = #{string => <<"---">>},
    Expected = <<"| --- |">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Interpolation should not alter surrounding whitespace.
triple_mustache_surrounding_whitespace_test() ->
    Template = <<"| {{{string}}} |">>,
    Data = #{string => <<"---">>},
    Expected = <<"| --- |">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Interpolation should not alter surrounding whitespace.
ampersand_surrounding_whitespace_test() ->
    Template = <<"| {{&string}} |">>,
    Data = #{string => <<"---">>},
    Expected = <<"| --- |">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Standalone interpolation should not alter surrounding whitespace.
interpolation_standalone_test() ->
    Template = <<"  {{string}}\n">>,
    Data = #{string => <<"---">>},
    Expected = <<"  ---\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Standalone interpolation should not alter surrounding whitespace.
triple_mustache_standalone_test() ->
    Template = <<"  {{{string}}}\n">>,
    Data = #{string => <<"---">>},
    Expected = <<"  ---\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Standalone interpolation should not alter surrounding whitespace.
ampersand_standalone_test() ->
    Template = <<"  {{&string}}\n">>,
    Data = #{string => <<"---">>},
    Expected = <<"  ---\n">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Superfluous in-tag whitespace should be ignored.
interpolation_with_padding_test() ->
    Template = <<"|{{ string }}|">>,
    Data = #{string => <<"---">>},
    Expected = <<"|---|">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Superfluous in-tag whitespace should be ignored.
triple_mustache_with_padding_test() ->
    Template = <<"|{{{ string }}}|">>,
    Data = #{string => <<"---">>},
    Expected = <<"|---|">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Superfluous in-tag whitespace should be ignored.
ampersand_with_padding_test() ->
    Template = <<"|{{& string }}|">>,
    Data = #{string => <<"---">>},
    Expected = <<"|---|">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).
