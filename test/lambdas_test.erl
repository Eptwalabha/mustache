%% --------------------------------------------------
%% DO NOT EDIT THIS FILE
%% It was generated automatically from the following specs
%% ./mustache-spec/specs/~lambdas.json
%% Fetched from this repository
%% https://github.com/mustache/spec
%%
%% date: 2022-10-20 19:49:18
%% @version v0.0.0
%% @reference Eptwalabha, https://github.com/Eptwalabha.
%%
%% @doc Lambdas are a special-cased data type for use in interpolations and
%% sections.
%%
%% When used as the data value for an Interpolation tag, the lambda MUST be
%% treatable as an arity 0 function, and invoked as such. The returned value
%% MUST be rendered against the default delimiters, then interpolated in place
%% of the lambda.
%%
%% When used as the data value for a Section tag, the lambda MUST be treatable
%% as an arity 1 function, and invoked as such (passing a String containing the
%% unprocessed section contents). The returned value MUST be rendered against
%% the current delimiters, then interpolated in place of the section.
%%
%% @end

-module(lambdas_test).

-include_lib("eunit/include/eunit.hrl").

-define(TO_LIST(Something), unicode:characters_to_list(Something)).

%% @doc A lambda's return value should be interpolated.
interpolation_test() ->
    Template = <<"Hello, {{lambda}}!">>,
    Data = #{ lambda => fun () -> "world" end },
    Expected = <<"Hello, world!">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc A lambda's return value should be parsed.
interpolation_expansion_test() ->
    Template = <<"Hello, {{lambda}}!">>,
    Data = #{ lambda => fun () -> "{{planet}}" end,
              planet => <<"world">> },
    Expected = <<"Hello, world!">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc A lambda's return value should parse with the default delimiters.
interpolation_alternate_delimiters_test() ->
    Template = <<"{{= | | =}}\nHello, (|&lambda|)!">>,
    Data = #{ lambda => fun () -> "|planet| => {{planet}}" end,
              planet => <<"world">> },
    Expected = <<"Hello, (|planet| => world)!">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Interpolated lambdas should not be cached.
interpolation_multiple_calls_test() ->
    Template = <<"{{lambda}} == {{{lambda}}} == {{lambda}}">>,
    put(interpolation_multiple_calls_test, 1),
    Lambda = fun () ->
                     Call = get(interpolation_multiple_calls_test),
                     put(interpolation_multiple_calls_test, Call + 1),
                     Call
             end,
    Data = #{ lambda => Lambda },
    Expected = <<"1 == 2 == 3">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Lambda results should be appropriately escaped.
escaping_test() ->
    Template = <<"<{{lambda}}{{{lambda}}}">>,
    Data = #{ lambda => fun () -> ">" end },
    Expected = <<"<&gt;>">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Lambdas used for sections should receive the raw section string.
section_test() ->
    Template = <<"<{{#lambda}}{{x}}{{/lambda}}>">>,
    Lambda = fun ("{{x}}") -> "yes";
                 (_) -> "no"
             end,
    Data = #{ lambda => Lambda },
    Expected = <<"<yes>">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Lambdas used for sections should have their results parsed.
section_expansion_test() ->
    Template = <<"<{{#lambda}}-{{/lambda}}>">>,
    Lambda = fun (Text) ->
                     Text ++ "{{planet}}" ++ Text
             end,
    Data = #{ lambda => Lambda,
              planet => <<"Earth">> },
    Expected = <<"<-Earth->">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Lambdas used for sections should parse with the current delimiters.
section_alternate_delimiters_test() ->
    Template = <<"{{= | | =}}<|#lambda|-|/lambda|>">>,
    Lambda = fun (Text) ->
                     Text ++ "{{planet}} => |planet|" ++ Text
             end,
    Data = #{ lambda => Lambda,
              planet => <<"Earth">> },
    Expected = <<"<-{{planet}} => Earth->">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Lambdas used for sections should not be cached.
section_multiple_calls_test() ->
    Template = <<"{{#lambda}}FILE{{/lambda}} != {{#lambda}}LINE{{/lambda}}">>,
    Lambda = fun (Text) ->
                     "__" ++ Text ++ "__"
             end,
    Data = #{ lambda => Lambda },
    Expected = <<"__FILE__ != __LINE__">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).

%% @doc Lambdas used for inverted sections should be considered truthy.
inverted_section_test() ->
    Template = <<"<{{^lambda}}{{static}}{{/lambda}}>">>,
    Data = #{ lambda => fun (_) -> false end,
              static => <<"static">> },
    Expected = <<"<>">>,
    ?assertEqual(?TO_LIST(Expected), mustache:render(Template, Data)).
